// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/networkanalyser/networkanalyser.proto

package networkanalysis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NetworkAnalyzer_SolveMatrix_FullMethodName = "/networkanalysis.NetworkAnalyzer/SolveMatrix"
)

// NetworkAnalyzerClient is the client API for NetworkAnalyzer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkAnalyzerClient interface {
	SolveMatrix(ctx context.Context, in *MatrixData, opts ...grpc.CallOption) (*SolutionResponse, error)
}

type networkAnalyzerClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkAnalyzerClient(cc grpc.ClientConnInterface) NetworkAnalyzerClient {
	return &networkAnalyzerClient{cc}
}

func (c *networkAnalyzerClient) SolveMatrix(ctx context.Context, in *MatrixData, opts ...grpc.CallOption) (*SolutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SolutionResponse)
	err := c.cc.Invoke(ctx, NetworkAnalyzer_SolveMatrix_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkAnalyzerServer is the server API for NetworkAnalyzer service.
// All implementations must embed UnimplementedNetworkAnalyzerServer
// for forward compatibility.
type NetworkAnalyzerServer interface {
	SolveMatrix(context.Context, *MatrixData) (*SolutionResponse, error)
	mustEmbedUnimplementedNetworkAnalyzerServer()
}

// UnimplementedNetworkAnalyzerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNetworkAnalyzerServer struct{}

func (UnimplementedNetworkAnalyzerServer) SolveMatrix(context.Context, *MatrixData) (*SolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolveMatrix not implemented")
}
func (UnimplementedNetworkAnalyzerServer) mustEmbedUnimplementedNetworkAnalyzerServer() {}
func (UnimplementedNetworkAnalyzerServer) testEmbeddedByValue()                         {}

// UnsafeNetworkAnalyzerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkAnalyzerServer will
// result in compilation errors.
type UnsafeNetworkAnalyzerServer interface {
	mustEmbedUnimplementedNetworkAnalyzerServer()
}

func RegisterNetworkAnalyzerServer(s grpc.ServiceRegistrar, srv NetworkAnalyzerServer) {
	// If the following call pancis, it indicates UnimplementedNetworkAnalyzerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NetworkAnalyzer_ServiceDesc, srv)
}

func _NetworkAnalyzer_SolveMatrix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatrixData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAnalyzerServer).SolveMatrix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkAnalyzer_SolveMatrix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAnalyzerServer).SolveMatrix(ctx, req.(*MatrixData))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkAnalyzer_ServiceDesc is the grpc.ServiceDesc for NetworkAnalyzer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkAnalyzer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "networkanalysis.NetworkAnalyzer",
	HandlerType: (*NetworkAnalyzerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SolveMatrix",
			Handler:    _NetworkAnalyzer_SolveMatrix_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/networkanalyser/networkanalyser.proto",
}
